// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;          
    struct node *next; 
}*start,*end;
void createList(int n)
{
    struct node *newnode, *temp;
    int data, i;
    start = (struct node *)malloc(sizeof(struct node));
    end = (struct node *)malloc(sizeof(struct node));
    if(start == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else{
        end->next=newnode;
        end=newnode;
    }
    printf("Enter the data of node 1: ");
    scanf("%d", &data);

    start->data = data;
    start->next = NULL; 

    temp = start;
    for(i=2; i<=n; i++)
    {
        newnode = (struct node *)malloc(sizeof(struct node));
        if(newnode == NULL)
        {
            printf("Unable to allocate memory.");
            break;
        }
        printf("Enter the data of node %d: ", i);
        scanf("%d", &data);
        newnode->data = data;
        newnode->next = NULL;

        temp->next = newnode; 
        temp = temp->next; 
    }
}
void traverseList()
{
    struct node *temp;
    if(start == NULL)
    {
        printf("List is empty.");
        return;
    }
    
    temp = start;
    while(temp != NULL)
    {
        printf("%d->", temp->data); 
        temp = temp->next;  
    }
    printf("NULL");
}
void insertfront(int data){
    struct node *newnode;
    newnode = (struct node*)malloc(sizeof(struct node));
    if(newnode == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        newnode->data = data; 
        newnode->next = start; 

        start = newnode;          

        printf("DATA INSERTED SUCCESSFULLY\n");
    }
}
void insertmid(int data1,int pos){
    int i;
    struct node *newnode, *temp;

    newnode = (struct node*)malloc(sizeof(struct node));

    if(newnode == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        newnode->data = data1; 
        newnode->next = NULL;

        temp = start;
        for(i=2; i<=pos-1; i++)
        {
            temp = temp->next;
            if(temp == NULL)
                break;
        }

        if(temp != NULL)
        {
            newnode->next = temp->next; 
            temp->next = newnode;

            printf("DATA INSERTED SUCCESSFULLY\n");
        }
        else
        {
            printf("UNABLE TO INSERT DATA AT THE GIVEN POSITION\n");
        }
    }
    
}
void insertend(int data2)
{
    struct node *newnode, *temp;
    newnode = (struct node*)malloc(sizeof(struct node));
    if(newnode == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        newnode->data = data2; 
        newnode->next = NULL; 

        temp = start;
        while(temp != NULL && temp->next != NULL)
            temp = temp->next;
        temp->next = newnode; 

        printf("DATA INSERTED SUCCESSFULLY\n");
    }
}
void delfirst()
{
    struct node *del;

    if(start == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        del = start;
        start = start->next;

        printf("\nData deleted = %d\n", del->data);
        free(del);

        printf("SUCCESSFULLY DELETED FIRST NODE FROM LIST\n");
    }
}
void delmid(int pos){
     int i;
    struct node *del, *prevnode;

    if(start == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        del = start;
        prevnode = start;
        for(i=2; i<=pos; i++)
        {
            prevnode = del;
            del = del->next;

            if(del == NULL)
                break;
        }

        if(del != NULL)
        {
            if(del == start)
                start = start->next;

            prevnode->next = del->next;
            del->next = NULL;
            free(del);
            printf("SUCCESSFULLY DELETED NODE FROM MIDDLE OF LIST\n");
        }
        else
        {
            printf("Invalid position unable to delete.");
        }
    }
}
void deleteend(){
    struct node *del, *sln;

    if(start == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        del = start;
        sln = start;
        while(del->next != NULL)
        {
            sln = del;
            del = del->next;
        }

        if(del == start)
        {
            start = NULL;
        }
        else
        {
            /* Disconnect link of second last node with last node */
            sln->next = NULL;
        }

        /* Delete the last node */
        free(del);

        printf("SUCCESSFULLY DELETED LAST NODE OF LIST\n");
    }
}
    
int main()
{
    int n,s,d,p,a,f,o,u;

    printf("Enter the total number of nodes: ");
    scanf("%d", &n);

    createList(n);
    //traverseList();
    printf("Enter the operation for insertion: \n1-front\n2-mid\n3-end\n");
    scanf("%d",&f);
    switch(f){
    case 1:
    printf("\nEnter the element to be inserted front: ");
    scanf("%d",&s);
    insertfront(s);
    break;
    case 2:
    printf("\nEnter the element and its position to be inserted mid: ");
    scanf("%d %d",&d,&p);
    insertmid(d,p);
    break;
    case 3:
    printf("\nEnter the element to be inserted end: ");
    scanf("%d",&a);
    insertend(a);
    break;
    }
    traverseList();
    printf("\nEnter the operation for deletion: \n1-front\n2-mid\n3-end\n");
    scanf("%d",&u);
    switch(u){
        case 1:
        printf("\nEnter the element to be deleted front: ");
        delfirst();
        case 2:
        printf("\nEnter the element to be delete mid: ");
        scanf("%d",&o);
        delmid(o);
        case 3:
        printf("\nEnter the element to deleted end: ");
        deleteend();
        
    }
    traverseList();

    return 0;
}

